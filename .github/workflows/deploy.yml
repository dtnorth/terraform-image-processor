name: CI/CD Pipeline for Docker Image to ECR and ECS

on:
  push:
    branches:
      - '**'  # Trigger on push to any branch, instead of just main

env:
  AWS_REGION: "eu-west-1"  #  AWS region
  ECR_REPOSITORY: "flask-app-repository"  # ECR repository name
  IMAGE_TAG: "${{ github.sha }}"  # Use the commit SHA as the image tag

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository code
    - name: Checkout code
      uses: actions/checkout@v2

    # Set up AWS CLI and configure credentials
    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # Log in to ECR
    - name: Log in to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

    # Build the Docker image
    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .

    # Run Trivy image scan
    - name: Scan Docker image with Trivy
      uses: aquasecurity/trivy-action@v0.3.0
      with:
        image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
        format: "table"  # Output format: json (can also be 'table', 'template', etc.)
        severity: "HIGH,CRITICAL"  # Set the severity to scan
        ignore-unfixed: true  # Optional: Ignore vulnerabilities without fixes
        exit-code: 1  # Fail the workflow if vulnerabilities are found (exit code 1)

    # Push the Docker image to ECR
    - name: Push Docker image to ECR
      run: |
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

    # Deploy to ECS (Assumes ECS Task Definition and Service are already created)
    - name: Deploy to ECS
      run: |
        # Update ECS Task Definition (replace with your ECS task definition and cluster details)
        ecs_task_definition=$(aws ecs describe-task-definition --task-definition "flask-app-task" --query 'taskDefinition.taskDefinitionArn' --output text)

        aws ecs update-service \
          --cluster "flask-app-cluster" \
          --service "flask-app-service" \
          --force-new-deployment \
          --task-definition $ecs_task_definition \
          --region ${{ env.AWS_REGION }}
